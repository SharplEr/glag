package org.sharpler.glag.output;

import static java.nio.file.StandardOpenOption.APPEND;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;
import org.sharpler.glag.aggregations.GcLog;
import org.sharpler.glag.aggregations.SafapointLog;
import org.sharpler.glag.distribution.CumulativeDistributionBuilder;

public final class MdOutput {
    private static final Path DOCS_PATH = Paths.get("src", "main", "resources", "docs");

    private final Path output;

    public MdOutput(Path output) {
        this.output = output;
    }

    public void print(SafapointLog safepoints, GcLog gcLog, int thresholdMs) throws IOException {
        Files.deleteIfExists(output);
        Files.createFile(output);
        writef("# Report%n%n");
        writef("This report of gc and safepoint log analysis has been generated by **glag** tool version 1.0-SNAPSHOT.%n%n");
        writef("## Safepoints%n%n");
        writeDoc(DOCS_PATH.resolve("safepoint").resolve("safepoint.md"));
        writef("%n%n");
        writef("## JVM operations in safepoint%n%n");

        for (var e : safepoints.distributions().entrySet()) {
            var events = safepoints.events().get(e.getKey());

            writef("### Operation '%s'%n%n", e.getKey());
            var description = DOCS_PATH.resolve("operation").resolve(e.getKey()+".md");
            if (Files.exists(description)) {
                writef("#### Description%n%n");
                writeDoc(description);
                writef("%n%n");
            }

            writef(
                "Frequency: %.3f op/min%n%n",
                60d * events.size() / (safepoints.finishLogSec() - safepoints.startLogSec())
            );

            writef("#### Cumulative distribution:%n%n");

            writef("| Timing (ms) | Probability (%%)|%n");
            writef("| ----------- | -------------- |%n");
            for (var point : e.getValue()) {
                var timingMs = point.value() / 1E6;

                writef(
                    timingMs > thresholdMs ?
                        "| **%.3f** | **%.2f** |%n" :
                        "| %.3f | %.2f |%n",
                    timingMs,
                    point.prob() * 100d
                );
            }

            if (e.getValue().get(e.getValue().size() - 1).value() / 1E6 < thresholdMs) {
                continue;
            }

            writef("#### Slow events: threshold = %d (ms)%n%n", thresholdMs);

            writef("| line in safepoint log | operation time (ns)| time to safepoint (ns) | GC number |%n");
            writef("| --------------------- | ------------------ | ---------------------- | --------- |%n");

            for (var event : events) {
                if (event.insideTimeNs() > TimeUnit.MILLISECONDS.toNanos(thresholdMs)) {
                    writef(
                        "| %d | %d | %d | ",
                        event.line(),
                        event.insideTimeNs(),
                        event.reachingTimeNs()
                    );

                    if (event.timestampSec() < gcLog.startLogSec() || event.timestampSec() > gcLog.finishLogSec()) {
                        writef("**OUT OF GC LOG** |%n");
                    } else {
                        var gcNums = gcLog.findGcByTime(event.timestampSec(), 0.1d);
                        if (gcNums.isEmpty()) {
                            writef("*miss in GC log* |%n");
                        } else {
                            writef("%s |%n", gcNums);
                        }
                    }
                }
            }
        }

        writef("## Time to safepoint%n%n");

        writeDoc(DOCS_PATH.resolve("safepoint").resolve("time_to_safepoint.md"));

        writef("%n%n");

        writef("### Cumulative distribution%n%n");

        writef("| Timing (ms) | Probability (%%)|%n");
        writef("| ----------- | -------------- |%n");

        for (var point : CumulativeDistributionBuilder.reachingDistribution(safepoints)) {
            var timingMs = point.value() / 1E6;
            writef(
                timingMs > thresholdMs ?
                    "| **%.3f** | **%.2f** |%n" :
                    "| %.3f | %.2f |%n",
                timingMs,
                point.prob() * 100d
            );
        }
    }

    private void writef(String format, Object... args) throws IOException {
        Files.writeString(output, String.format(format, args), APPEND);
    }

    private void writeDoc(Path docPath) throws IOException {
        Files.write(output, Files.readAllBytes(docPath), APPEND);
    }
}
