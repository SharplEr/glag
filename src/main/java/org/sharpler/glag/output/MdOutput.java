package org.sharpler.glag.output;

import static java.nio.file.StandardOpenOption.APPEND;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import javax.annotation.Nullable;
import org.sharpler.glag.aggregations.RuntimeEvents;
import org.sharpler.glag.distribution.CumulativeDistributionBuilder;
import org.sharpler.glag.records.GcLogRecords;
import org.sharpler.glag.records.SafepointLogRecord;

public final class MdOutput {
    private static final Path DOCS_PATH = Path.of("docs");

    private final Path output;

    public MdOutput(Path output) {
        this.output = output;
    }

    public void print(RuntimeEvents runtimeEvents) throws IOException {
        var thresholdMs = runtimeEvents.thresholdMs();
        var safepoints = runtimeEvents.safepointLog();

        Files.deleteIfExists(output);
        Files.createFile(output);
        writef("# Report%n%n");
        writef("This report of gc and safepoint log analysis has been generated by **glag** tool version 1.0-SNAPSHOT.%n%n");

        writef(
            "Throughput lost based on pauses: %.3f (%%) - %.3f(%%)%n%n",
            safepoints.events().stream().mapToLong(SafepointLogRecord::insideTimeNs).sum() / safepoints.totalLogTimeSec() / 1E7,
            safepoints.events().stream().mapToLong(SafepointLogRecord::totalTimeNs).sum() / safepoints.totalLogTimeSec() / 1E7
        );

        if (runtimeEvents.gcName() != null) {
            var name = runtimeEvents.gcName().getName();
            writef("%s has been detected.%n%n", name);
            var gcDescription = DOCS_PATH.resolve("gc").resolve(name + ".md");
            if (docExists(gcDescription)) {
                writef("## %s%n%n", name);
                writeDoc(gcDescription);
                writef("%n%n");
            } else {
                System.err.printf("GC '%s' description is unsupported%n", name);
            }
        } else {
            System.err.println("Failed to detect GC by logs");
        }

        writef("## Safepoints%n%n");
        writeDoc(DOCS_PATH.resolve("safepoint").resolve("safepoint.md"));
        writef("%n%n");
        writef("## JVM operations in safepoint%n%n");

        var unknownOperations = new HashSet<String>();
        for (var e : safepoints.distributions().entrySet()) {
            var events = safepoints.byTypes().get(e.getKey());

            writef("### Operation '%s'%n%n", e.getKey());
            var description = DOCS_PATH.resolve("operation").resolve(e.getKey() + ".md");
            if (docExists(description)) {
                writef("#### Description%n%n");
                writeDoc(description);
                writef("%n%n");
            } else {
                if (unknownOperations.add(e.getKey())) {
                    System.err.printf("GC operation '%s' is unknown%n", e.getKey());
                }
            }

            writef("Period: %.3f (sec/op)%n%n", safepoints.totalLogTimeSec() / events.size());

            writef("#### Cumulative distribution:%n%n");

            writef("| Timing (ms) | Probability (%%)|%n");
            writef("| ----------- | -------------- |%n");
            for (var point : e.getValue()) {
                var timingMs = point.value() / 1E6;

                writef(
                    timingMs > thresholdMs ? "| **%.3f** | **%.2f** |%n" : "| %.3f | %.2f |%n",
                    timingMs,
                    point.prob() * 100d
                );
            }

            writef("%n");

            var slowSingleVmOperations = runtimeEvents.slowSingleVmOperations().getOrDefault(e.getKey(), List.of());

            if (slowSingleVmOperations.isEmpty()) {
                continue;
            }

            writef("#### Slow single safepoints: threshold = %d (ms)%n%n", thresholdMs);

            writef("| line in safepoint log | operation time (ns)| time to safepoint (ns) |%n");
            writef("| --------------------- | ------------------ | ---------------------- |%n");

            for (var event : slowSingleVmOperations) {
                writef(
                    "| %d | %d | %d |%n",
                    event.safepointLog().line(),
                    event.safepointLog().insideTimeNs(),
                    event.safepointLog().reachingTimeNs()
                );
            }
            writef("%n");
        }

        writef("## Time to safepoint%n%n");

        writeDoc(DOCS_PATH.resolve("safepoint").resolve("time_to_safepoint.md"));

        writef("%n%n");

        writef("### Cumulative distribution%n%n");

        writef("| Timing (ms) | Probability (%%)|%n");
        writef("| ----------- | -------------- |%n");

        for (var point : CumulativeDistributionBuilder.reachingDistribution(safepoints)) {
            var timingMs = point.value() / 1E6;
            writef(
                timingMs > thresholdMs ?
                    "| **%.3f** | **%.2f** |%n" :
                    "| %.3f | %.2f |%n",
                timingMs,
                point.prob() * 100d
            );
        }

        var slowGcs = runtimeEvents.slowGcs();
        if (!slowGcs.isEmpty()) {
            writef("## GC iteration with long pauses: threshold = %d (ms)%n%n", thresholdMs);

            for (var slowGc : slowGcs) {
                writef("### GC iteration %d%n%n", slowGc.gcLog().gcNum());

                writef("#### Slow safepoints%n%n");
                writef("| line in safepoint log | operation | operation time (ns)| time to safepoint (ns) |%n");
                writef("| --------------------- | ----------| ------------------ | ---------------------- |%n");
                for (var safepoint : slowGc.safepointLog()) {
                    writef(
                        "| %d | %s | %d | %d |%n",
                        safepoint.line(),
                        safepoint.operationName(),
                        safepoint.insideTimeNs(),
                        safepoint.reachingTimeNs()
                    );
                }
                writef("%n");

                writef("#### Gc logs%n%n");
                writef("```%n");
                for (var gcEvent : slowGc.gcLog().records()) {
                    writef("%s%n", gcEvent.origin());
                }
                writef("```%n%n");
            }
        }
        var slowSimultaneousGcs = runtimeEvents.slowSimultaneousGcs();
        if (!slowSimultaneousGcs.isEmpty()) {
            writef("## Simultaneous GC iteration with long pauses: threshold = %d (ms)%n%n", thresholdMs);

            for (var slowSimultaneousGc : slowSimultaneousGcs) {
                writef("### GC iterations %s%n%n",
                    Arrays.toString(slowSimultaneousGc.gcs().stream().mapToInt(GcLogRecords::gcNum).toArray()));

                writef("#### Slow safepoints%n%n");
                writef("| line in safepoint log | operation | operation time (ns)| time to safepoint (ns) |%n");
                writef("| --------------------- | ----------| ------------------ | ---------------------- |%n");
                for (var safepoint : slowSimultaneousGc.safepointLog()) {
                    writef(
                        "| %d | %s | %d | %d |%n",
                        safepoint.line(),
                        safepoint.operationName(),
                        safepoint.insideTimeNs(),
                        safepoint.reachingTimeNs()
                    );
                }
                writef("%n");

                for (var slowGc : slowSimultaneousGc.gcs()) {
                    writef("#### GC %d logs%n%n", slowGc.gcNum());
                    writef("```%n");
                    for (var gcEvent : slowGc.records()) {
                        writef("%s%n", gcEvent.origin());
                    }
                    writef("```%n%n");
                }
            }
        }

    }

    private void writef(String format, Object... args) throws IOException {
        Files.writeString(output, String.format(format, args), APPEND);
    }

    private boolean docExists(Path docPath) throws IOException {
        try (@Nullable var stream = getClass().getClassLoader().getResourceAsStream(docPath.toString())) {
            return stream != null;
        }
    }

    private void writeDoc(Path docPath) throws IOException {
        var strPath = docPath.toString();

        @Nullable
        byte[] bytes = null;
        try (@Nullable var stream = getClass().getClassLoader().getResourceAsStream(strPath)) {
            if (stream == null) {
                throw new IllegalStateException("Can't find document in resources: '%s'".formatted(strPath));
            }

            bytes = stream.readAllBytes();
        }
        if (bytes.length == 0) {
            throw new IllegalStateException("Can't read document in resources: '%s'".formatted(strPath));
        }
        Files.write(output, bytes, APPEND);
    }
}
